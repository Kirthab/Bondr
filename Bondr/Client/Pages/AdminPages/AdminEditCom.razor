@page "/admin/editcommunity/{id}"

@inject HttpClient _client
@inject IJSRuntime js
@inject NavigationManager _navManager
<!-- For IDisposable Error Handling-->
@inject HttpInterceptorService _interceptor
@implements IDisposable
@inject AuthenticationStateProvider AuthenticationStateProvider

<!-- Container for creating a new community -->
<div id="container">
    <!-- Heading for creating a new community -->
    <h3 class="card-title">Create New Community</h3>
    <hr />
    <br />

    <!-- EditForm for community creation with validation -->
    <EditForm Model="@community" OnValidSubmit="UpdateCommunity">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <!-- Form group for community name -->
        <div class="form-group">
            <label>Name: </label>
            <div>
                <InputText @bind-Value="@community.Name" class="form-control" />
                <ValidationMessage For="@(() => community.Name)" />
            </div>
        </div>

        <!-- Form group for community description -->
        <div class="form-group">
            <label>Description: </label>
            <div>
                <InputText @bind-Value="@community.Description" class="form-control" />
                <ValidationMessage For="@(() => community.Description)" />
            </div>
        </div>

        <!-- Dropdown list for staff selection -->
        <div class="form-group">
            <label>Assign Staff: </label>
            <div>
                <select @bind="community.StaffId" class="form-control">
                    <option value="">Select Staff</option>
                    <!-- Iterate through existing staff and create options -->
                    @foreach (var staff in existingStaff)
                    {
                        <option value="@staff.Id">@staff.Name</option>
                    }
                </select>
                <ValidationMessage For="@(() => community.StaffId)" />
            </div>
        </div>

        <br />
        <br />

        <!-- Button to submit the form and create the community -->
        <button type="submit" class="btn btn-success btn-block" disabled="@IsCommunityNameDuplicate()">
            Update Community
        </button>
    </EditForm>
</div>
@code {
    Community? community = new Community();
    List<Community> existingCommunities = new List<Community>();
    List<Staff> existingStaff = new List<Staff>();

    // This section is to handle authorization of pages
    private List<System.Security.Claims.Claim> UserClaims;
    private bool IsAdmin;

    [Parameter]
    public string id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent(); // Monitor Events

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Check first if user is authorized
        UserClaims = user.Claims.ToList();
        IsAdmin = user.IsInRole("Admin");  //Get user role

        if (!IsAdmin)
        {
            _navManager.NavigateTo("/unauthorized"); // Kick out the unauthorized hackers!!
        }
        existingCommunities = await _client.GetFromJsonAsync<List<Community>>(Endpoints.CommunityEndpoint);
        community = await _client.GetFromJsonAsync<Community>($"{Endpoints.CommunityEndpoint}/{id}");
        existingStaff = await _client.GetFromJsonAsync<List<Staff>>(Endpoints.StaffEndpoint);
    }

    <!-- Method to check if the community name is a duplicate -->
    private bool IsCommunityNameDuplicate()
    {
        foreach (var existingCommunity in existingCommunities)
        {
            // Ensure the ID of the existing community is different from the new or updated community.
            if (existingCommunity.Id != community.Id &&
                // Ensure the name of the existing community is not null.
                existingCommunity.Name != null &&
                // Ensure the name of the new or updated community is not null.
                community.Name != null &&
                // Compare the names in a case-insensitive manner.
                existingCommunity.Name.Equals(community.Name, StringComparison.OrdinalIgnoreCase))
            {
                // If all conditions are satisfied, it is a duplicate.
                return true;
            }
        }

        // If no duplicate is found, return false.
        return false;
    }

    async Task UpdateCommunity()
    {
        <!-- Send a PUT request to update the community details -->
        await _client.PutAsJsonAsync($"{Endpoints.CommunityEndpoint}/{id}", community);
        <!-- Navigate to the communities page after successful update -->
        _navManager.NavigateTo("/admin/com");
    }

    <!-- Method called when the component is disposed -->
    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }
}
}
}
