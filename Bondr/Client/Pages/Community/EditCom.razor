@page "/communities/edit/{id:int}"

@inject HttpClient _client
@inject NavigationManager _navManager
<!-- For IDisposable Error Handling-->
@inject HttpInterceptorService _interceptor
@implements IDisposable
@inject IJSRuntime js
@inject AuthenticationStateProvider AuthenticationStateProvider

<!-- Link to external stylesheet for CreateCommunityStyles.css -->
<link rel="stylesheet" href="path/to/CreateCommunityStyles.css" />

<!-- Container for editing a community -->
<div id="container">
    <!-- Heading for editing a community -->
    <h3 class="card-title">Edit Community</h3>
    <hr />
    <br />
    <!-- Use a reusable FormComponent with specific parameters -->
    <FormComponent ButtonText="Update" OnValidSubmit="EditCommunity" community="community" />
</div>

@code {
    
    // This section is to handle authorization of pages
    private List<System.Security.Claims.Claim> UserClaims;
    private bool IsAdmin, IsUser;
    List<Community> existingCommunities = new List<Community>();

    [Parameter] public int id { get; set; } // Define a parameter for the community ID
    Community? community = new Community(); // Initialize a nullable Community object


    protected override async Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent(); // Monitor Events

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Check first if user is authorized
        UserClaims = user.Claims.ToList();
        IsAdmin = user.IsInRole("Admin");  //Get user role
        IsUser = user.IsInRole("User");  //Get user role

        if (!(IsAdmin || IsUser))
        {
            _navManager.NavigateTo("/unauthorized"); // Kick out the unauthorized hackers!!
        }

        existingCommunities = await _client.GetFromJsonAsync<List<Community>>(Endpoints.CommunityEndpoint);
    }


    <!-- Method called when parameters are set -->
    protected async override Task OnParametersSetAsync()
    {
        <!-- Fetch the specific community details based on the ID -->
        community = await _client.GetFromJsonAsync<Community>($"{Endpoints.CommunityEndpoint}/{id}");
    }

    <!-- Method to edit a community -->
    async Task EditCommunity()
    {   // Check for duplicate community name
        if (IsCommunityNameDuplicate())
        {
            // Handle duplicate name (show an alert, validation message, etc.)
            await js.InvokeAsync<object>("alert", "Duplicate community name. Please choose a different name.");
        }
        else
        {
            // Send a PUT request to update the community details
            await _client.PutAsJsonAsync($"{Endpoints.CommunityEndpoint}/{id}", community);

            // Navigate to the communities page after successful update
            _navManager.NavigateTo("/communities/");
        }
    }

    private bool IsCommunityNameDuplicate()
    {
        // Iterate through existing communities to check for duplicates
        foreach (var existingCommunity in existingCommunities)
        {
            // Check if the name of the existing community is not null and equals the new community's name
            if (existingCommunity.Name != null &&
                existingCommunity.Name.Equals(community.Name, StringComparison.OrdinalIgnoreCase))
            {
                // If a duplicate is found, return true
                return true;
            }
        }

        // If no duplicate is found, return false
        return false;
    }

    <!-- Method called when the component is disposed -->
    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }
}
