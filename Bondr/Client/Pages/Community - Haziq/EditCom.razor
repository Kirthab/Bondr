@page "/communities/edit/{id:int}"

@inject HttpClient _client
@inject NavigationManager _navManager
<!-- For IDisposable Error Handling-->
@inject HttpInterceptorService _interceptor
@implements IDisposable
@inject AuthenticationStateProvider AuthenticationStateProvider

<!-- Link to external stylesheet for CreateCommunityStyles.css -->
<link rel="stylesheet" href="path/to/CreateCommunityStyles.css" />

<!-- Container for editing a community -->
<div id="container">
    <!-- Heading for editing a community -->
    <h3 class="card-title">Edit Community</h3>
    <hr />
    <br />
    <!-- Use a reusable FormComponent with specific parameters -->
    <FormComponent ButtonText="Update" OnValidSubmit="EditCommunity" community="community" />
</div>

@code {
    
    // This section is to handle authorization of pages
    private List<System.Security.Claims.Claim> UserClaims;
    private bool IsAdmin;

    [Parameter] public int id { get; set; } // Define a parameter for the community ID
    Community? community = new Community(); // Initialize a nullable Community object


    protected override async Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent(); // Monitor Events

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Check first if user is authorized
        UserClaims = user.Claims.ToList();
        IsAdmin = user.IsInRole("Admin");  //Get user role

        if (!IsAdmin)
        {
            _navManager.NavigateTo("/unauthorized"); // Kick out the unauthorized hackers!!
        }
    }


    <!-- Method called when parameters are set -->
    protected async override Task OnParametersSetAsync()
    {
        <!-- Fetch the specific community details based on the ID -->
        community = await _client.GetFromJsonAsync<Community>($"{Endpoints.CommunityEndpoint}/{id}");
    }

    <!-- Method to edit a community -->
    async Task EditCommunity()
    {
        <!-- Send a PUT request to update the community details -->
        await _client.PutAsJsonAsync($"{Endpoints.CommunityEndpoint}/{id}", community);
        <!-- Navigate to the communities page after successful update -->
        _navManager.NavigateTo("/communities/");
    }

    <!-- Method called when the component is disposed -->
    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }
}
