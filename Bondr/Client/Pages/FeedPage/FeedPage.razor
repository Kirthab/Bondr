@inject NavigationManager Navigation
@inject HttpClient _client
@inject IJSRuntime js
@inject HttpInterceptorService _interceptor
@implements IDisposable
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication


@page "/"

<!-- Landing page. Authorized & UnAuthorized -->
<AuthorizeView>
    <!-- Users not logged in will see an image -->
    <NotAuthorized>
        <div class="bgimg">
            <img id="bg" src="../Images/Pages/welcomepage.jpg" alt="Welcome Image">
        </div>
    </NotAuthorized>
    <!-- For users logged in -->
    <Authorized>
        <PageTitle>Home</PageTitle>

        <!-- Top page css elements -->
        <div id="container">
            <article class="carousel">
                <div class="carousel-div">
                    <ul>
                        <li><a href="communities"><img draggable="false" src="../Images/Carousel/carousel1.jpg" /></a></li>
                        <li><a href="communities"><img draggable="false" src="../Images/Carousel/carousel2.jpg" /></a></li>
                        <li><a href="Settings"><img draggable="false" src="../Images/Carousel/carousel3.jpg" /></a></li>
                        <li><a href=""><img draggable="false" src="../Images/Carousel/carousel4.jpg" /></a></li>
                        <li><a href="communities/createcommunity"><img draggable="false" src="../Images/Carousel/carousel5.jpg" /></a></li>
                    </ul>
                </div>
                <div class="carousel-div">
                    <ul>
                        <li><a href="communities"><img draggable="false" src="../Images/Carousel/carousel1.jpg" /></a></li>
                        <li><a href="communities"><img draggable="false" src="../Images/Carousel/carousel2.jpg" /></a></li>
                        <li><a href="Settings"><img draggable="false" src="../Images/Carousel/carousel3.jpg" /></a></li>
                        <li><a href=""><img draggable="false" src="../Images/Carousel/carousel4.jpg" /></a></li>
                        <li><a href="communities/createcommunity"><img draggable="false" src="../Images/Carousel/carousel5.jpg" /></a></li>
                    </ul>
                </div>
            </article>

            <!-- The two centrally placed cards -->
            <div class="col">
                <a class="card card1" href="subscribe">
                    <h5>Discover Communities</h5>
                    <p>Click here to discover new communities</p>
                </a>
                <a class="card card2" href="communities">
                    <h5>Manage communities</h5>
                    <p>Click here to manage your communities</p>
                </a>
            </div>

            <!-- Genre filter -->
            <div id="selection">
                <select class="postGenreDropdown" @oninput="Filter">
                    @if (Genres != null && Genres.Any())
                    {
                        <option value="0">ALL</option>
                        @foreach (var genre in Genres)
                        {
                            <option value="@genre.Id">@genre.Name</option>
                        }
                    }
                </select>
                <button type="button" class="createPost" @onclick="CreatePost">Create Post <i class="oi oi-plus"></i></button>
            </div>

            <div class="feed">  <!-- User feed (POSTS) -->
                @if (filteredGenre)
                {
                    @if (Posts == null || !Posts.Any())
                    {
                        <br />
                        <br />
                        <div class="alert alert-info">No posts yet</div>
                    }
                    else
                    {
                        <table>
                            <thead>
                                <tr>
                                    <th>Title</th>
                                    <th colspan="8" style="text-align: right;">Vote</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var post in DisplayedPosts)
                                {
                                    <tr>
                                        <td>
                                            <a href="/post/viewpost/@post.Id" class="post-link">
                                                <div>
                                                    @post.Title
                                                </div>
                                            </a>
                                        </td>
                                        <td colspan="8" style="text-align: right;">@post.Vote</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        <br />
                    }
                }
                else{
                    @if (Posts == null || !Posts.Any())
                    {
                        <div class="alert alert-info">No posts yet</div>
                    }
                    else
                    {
                        <table>
                            <thead>
                                <tr>
                                    <th>Title</th>
                                    <th colspan="8" style="text-align: right;">Vote</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var post in DisplayedPosts)
                                {
                                    @if (post.GenreId == setGenreIdFilter)
                                    {
                                        <tr>
                                            <td>
                                                <a href="/post/viewpost/@post.Id" class="post-link">
                                                    <div>
                                                        @post.Title
                                                    </div>
                                                </a>
                                            </td>
                                            <td colspan="8" style="text-align: right;">@post.Vote</td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                        <br />
                    }
                }
                <!-- Pagination controls -->
                <div class="pagination">
                    <button disabled="@IsFirstPage" class="page-button" @onclick="PreviousPage">&#x21E0; Back</button>
                    <span>Page @currentPage of @totalPages</span>
                    <button disabled="@IsLastPage" class="page-button" @onclick="NextPage">Next &#x21E2;</button>
                </div>
                <br />
            </div>
        </div>
    </Authorized>
</AuthorizeView>

@code {

    private List<Post>? Posts;
    private List<Post> DisplayedPosts;
    private int postsPerPage = 10;
    private int currentPage = 1;

    private int totalPages => (int)Math.Ceiling((double)(Posts?.Count ?? 0) / postsPerPage);

    private bool IsFirstPage => currentPage == 1;
    private bool IsLastPage => currentPage == totalPages;
    private IList<Genre>? Genres;
    private bool filteredGenre = true;
    private int setGenreIdFilter;
    private int defaultGenreId;

    // This section is to handle authorization of pages
    private List<System.Security.Claims.Claim> UserClaims;
    private bool IsAdmin;

    //Genre filter
    private void Filter(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out var genreId))
        {
            if (genreId == 0)
            {
                // Handle the "ALL" option
                filteredGenre = true;
            }
            else
            {
                filteredGenre = false;
                setGenreIdFilter = genreId;
                currentPage = 1;
                defaultGenreId = genreId;
                UpdateDisplayedPosts();
            }
        }
    }


    protected override void OnParametersSet()
    {
        UpdateDisplayedPosts();
    }

    public void Dispose() //Dispose function
    {
        _interceptor.DisposeEvent();
    }

    // Pagination controls and such

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            UpdateDisplayedPosts();
        }
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            UpdateDisplayedPosts();
        }
    }

    private void UpdateDisplayedPosts()
    {
        int startIndex = (currentPage - 1) * postsPerPage;
        DisplayedPosts = Posts?.Skip(startIndex).Take(postsPerPage).ToList() ?? new List<Post>();
    }

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent(); // Monitor Events

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        UserClaims = user.Claims.ToList();
        IsAdmin = user.IsInRole("Admin"); //Get user roles

        if (IsAdmin)
        {
            Navigation.NavigateTo("/unauthorized");
        }

        try
        {
            Genres = await _client.GetFromJsonAsync<List<Genre>>($"{Endpoints.GenresEndpoint}");
            Posts = await _client.GetFromJsonAsync<List<Post>>(Endpoints.PostEndpoint);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching posts: {ex.Message}");
            Posts = new List<Post>();
        }
    }

    //CRUD Functions
    async Task Delete(int PostId)
    {
        if (Posts != null)
        {
            var Post = Posts.First(q => q.Id == PostId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {Post.Title}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.PostEndpoint}/{PostId}");
                await OnInitializedAsync();
            }
        }
    }

    private void CreatePost()
    {
        Navigation.NavigateTo("/feed/newpost");
    }


    
}