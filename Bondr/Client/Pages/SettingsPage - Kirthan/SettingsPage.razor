@inject NavigationManager _navManager
@inject HttpClient _client
@inject HttpInterceptorService _interceptor
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime js
@inject IJSRuntime JSRuntime

@page "/settings"

<div class="header">
    <img src="../Images/Pages/settingsBanner.png">
</div>

<EditForm Model="EditVisitor" OnValidSubmit="UpdateUser">
    @if (EditVisitor != null)
    {
        <div id="container">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <label for="username">Username:</label>
            <input type="text" id="username" name="username" placeholder="@EditVisitor?.Username" @bind="EditVisitor.Username" required>

            <label for="status">Status:</label>
            <input type="text" id="status" name="status" placeholder="@EditVisitor?.Status" @bind="EditVisitor.Status">

            <label for="email">Email:</label>
            <input type="email" id="email" name="email" placeholder="@EditVisitor?.Email" @bind="EditVisitor.Email" readonly>

            <label for="password">Password:</label>
            <input type="text" id="password" name="password" value="@text" readonly>
            <span class='togglepassword' @onclick="TogglePass">@text2</span>

            <label for="notification">Gender (Optional):</label>
            <select id="notification" name="notification" @bind="EditVisitor.Gender">
                <option value="Male" selected="@(EditVisitor.Gender == "Male")">Male</option>
                <option value="Female" selected="@(EditVisitor.Gender == "Female")">Female</option>
                <option value="Other" selected="@(EditVisitor.Gender == "Other")">Other</option>
            </select>

            <label for="age">BirthDay</label>
            <input id="age" name="age" class="form-control" type="date" @oninput="UpdateAgeFromDate" />

            <button class="bt1" type="submit">Save Changes</button>
        </div>

    }
</EditForm>

@code {
    private IList<Visitor>? Visitors;
    private Visitor EditVisitor = new Visitor();
    private string text;
    private string text2 = "Show Password";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        Visitors = await _client.GetFromJsonAsync<List<Visitor>>($"{Endpoints.VisitorEndpoint}");
        EditVisitor = Visitors.FirstOrDefault(item => item.Email == user.Identity?.Name) ?? new Visitor();
        text = EditVisitor.Password;
    }

    private async Task UpdateUser()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var id = EditVisitor.Id;
        await _client.PutAsJsonAsync($"{Endpoints.VisitorEndpoint}/{id}", EditVisitor);

        await js.InvokeAsync<object>("alert", "Your profile has been updated");
        await JSRuntime.InvokeVoidAsync("location.reload");
        _navManager.NavigateTo("/");
    }

    private async Task TogglePass()
    {
        if (text == EditVisitor.Password)
        {
            text = new string('*', EditVisitor.Password?.Length ?? 0);
            text2 = "Show Password";
        }
        else
        {
            text = EditVisitor.Password;
            text2 = "Hide Password";
        }
    }

    private void UpdateAgeFromDate(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value.ToString(), out DateTime dob))
        {
            DateTime today = DateTime.Today;
            int age = today.Year - dob.Year;

            // Check if the birthday has occurred this year
            if (dob.Date > today.AddYears(-age))
            {
                age--;
            }

            EditVisitor.Age = age;
        }
    }
}

