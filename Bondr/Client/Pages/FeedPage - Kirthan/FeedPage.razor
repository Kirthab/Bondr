@inject NavigationManager Navigation
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor
@implements IDisposable

@page "/"

<PageTitle>Home</PageTitle>

<div id="container">
    <article class="carousel">
        <div class="carousel-div">
            <ul>
                <li><a href="Discover"><img draggable="false" src="../Images/Carousel/carousel1.jpg" /></a></li>
                <li><a href="CommunityRequest"><img draggable="false" src="../Images/Carousel/carousel2.jpg" /></a></li>
                <li><a href="Settings"><img draggable="false" src="../Images/Carousel/carousel3.jpg" /></a></li>
                <li><a href="SettingsPage"><img draggable="false" src="../Images/Carousel/carousel4.jpg" /></a></li>
                <li><a href="CommunityForumn"><img draggable="false" src="../Images/Carousel/carousel5.jpg" /></a></li>
            </ul>
        </div>
        <div class="carousel-div">
            <ul>
                <li><a href="Discover"><img draggable="false" src="../Images/Carousel/carousel1.jpg" /></a></li>
                <li><a href="CommunityRequest"><img draggable="false" src="../Images/Carousel/carousel2.jpg" /></a></li>
                <li><a href="Settings"><img draggable="false" src="../Images/Carousel/carousel3.jpg" /></a></li>
                <li><a href="SettingsPage"><img draggable="false" src="../Images/Carousel/carousel4.jpg" /></a></li>
                <li><a href="CommunityForumn"><img draggable="false" src="../Images/Carousel/carousel5.jpg" /></a></li>
            </ul>
        </div>
    </article>

    <!-- <SurveyPrompt Title="How is Blazor working for you?" /> -->
    <div class="col">
        <div class="card card1">
            <h5>Discover Communities</h5>
            <p>Click here to discover new communities</p>
        </div>
        <div class="card card2">
            <h5>Manage communities</h5>
            <p>Click here to manage your communities</p>
        </div>
    </div>

    <button type="button" class="createPost" @onclick="CreatePost">Create Post <i class="oi oi-plus"></i></button>
    
    <div class="feed">
        @if (Posts == null || !Posts.Any())
        {
            <div class="alert alert-info">No posts yet</div>
        }
        else
        {
            <table>
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Vote</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var post in DisplayedPosts)
                    {
                        <tr>
                            <td>
                                <a href="/post/viewpost/@post.Id" class="post-link">
                                <div>
                                    @post.Title
                                 </div>
                                 </a>
                             </td>
                            <td>@post.Vote</td>
                        </tr>
                    }
                </tbody>
            </table>
            <br/>
            <!-- Pagination controls -->
            <div class="pagination">
                <button disabled="@IsFirstPage" class="page-button" @onclick="PreviousPage">&#x21E0; Back</button>
                <span>Page @currentPage of @totalPages</span>
                <button disabled="@IsLastPage" class="page-button" @onclick="NextPage">Next &#x21E2;</button>
            </div>
            <br />
        }
    </div>
</div>

@code {

    private List<Post>? Posts;
    private List<Post> DisplayedPosts;
    private int postsPerPage = 20;
    private int currentPage = 1;

    private int totalPages => (int)Math.Ceiling((double)(Posts?.Count ?? 0) / postsPerPage);

    private bool IsFirstPage => currentPage == 1;
    private bool IsLastPage => currentPage == totalPages;

    protected override void OnParametersSet()
    {
        UpdateDisplayedPosts();
    }

    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            UpdateDisplayedPosts();
        }
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            UpdateDisplayedPosts();
        }
    }

    private void UpdateDisplayedPosts()
    {
        int startIndex = (currentPage - 1) * postsPerPage;
        DisplayedPosts = Posts?.Skip(startIndex).Take(postsPerPage).ToList() ?? new List<Post>();
    }
    protected async override Task OnInitializedAsync()
    {
        try
        {
            Posts = await _client.GetFromJsonAsync<List<Post>>(Endpoints.PostEndpoint);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching posts: {ex.Message}");
            Posts = new List<Post>();
        }
    }


    async Task Delete(int PostId)
    {
        if (Posts != null)
        {
            var Post = Posts.First(q => q.Id == PostId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {Post.Title}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.PostEndpoint}/{PostId}");
                await OnInitializedAsync();
            }
        }
    }

    private void CreatePost()
    {
        Navigation.NavigateTo("/feed/newpost");
    }
}